# ===================================================================
# DOCKER CONFIGURATION FOR ETL PIPELINE
# Complete containerization setup with orchestration
# ===================================================================

# Dockerfile for PySpark ETL Application
FROM openjdk:11-jre-slim

# Set environment variables
ENV SPARK_VERSION=3.4.1
ENV HADOOP_VERSION=3
ENV SPARK_HOME=/opt/spark
ENV PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin
ENV PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-*-src.zip

# Install Python and dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Download and install Spark
RUN wget https://downloads.apache.org/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz \
    && tar -xzf spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz \
    && mv spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION} $SPARK_HOME \
    && rm spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz

# Copy requirements and install Python dependencies
COPY requirements.txt /app/requirements.txt
RUN pip3 install -r /app/requirements.txt

# Copy application code
COPY . /app
WORKDIR /app

# Create non-root user
RUN useradd -m sparkuser && chown -R sparkuser:sparkuser /app /opt/spark
USER sparkuser

# Expose Spark web UI port
EXPOSE 4040

# Default command
CMD ["python3", "comprehensive_pyspark_etl_pipeline.py"]

# ===================================================================
# DOCKER COMPOSE CONFIGURATION
# Multi-container setup with all dependencies
# ===================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: etl_postgres
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - etl_network

  # Apache Kafka for streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: etl_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - etl_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: etl_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - etl_network

  # PySpark ETL Application
  pyspark-etl:
    build: .
    container_name: pyspark_etl
    depends_on:
      - postgres
      - kafka
    environment:
      SPARK_MASTER: local[*]
      POSTGRES_HOST: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - etl_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: etl_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - etl_network

  # Visualization with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: etl_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - etl_network

volumes:
  postgres_data:
  grafana_data:

networks:
  etl_network:
    driver: bridge

# ===================================================================
# REQUIREMENTS.TXT
# Python dependencies for the ETL pipeline
# ===================================================================

pyspark==3.4.1
pandas==2.0.3
numpy==1.24.3
psycopg2-binary==2.9.7
kafka-python==2.0.2
requests==2.31.0
sqlalchemy==2.0.20
prometheus-client==0.17.1
boto3==1.28.57
py4j==0.10.9.7
